
#include <iostream>
#include <vector>
#include <algorithm>
#define NMAX 101

using namespace std;


int dizolva(vector<vector<int>>& board, int i, int j)
{

	if (i < 0 || i >= board.size() || j < 0 || j >= board[i].size() || board[i][j] == 0)
	{
		return 0;
	}
	board[i][j] = 0;
	dizolva(board, i + 1, j);
	dizolva(board, i-1, j);
	dizolva(board, i, j + 1);
	dizolva(board, i, j - 1);
	return 1;
}
int numInsule(vector<vector<int>> & board)
{
	int numInsule = 0;
	int rows = board.size();
	int columns = board[0].size();
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < columns; j++)
		{
			if (board[i][j] == 1)
				numInsule += dizolva(board, i, j);
		}
	}
	return numInsule;
}

int main()
{
	
	/*vector<vector<int>> board =
	{
		{1,1,1,1,0},
		{1,1,0,1,0},
		{1,1,0,0,0},
		{0,0,0,0,0},
	};*/
	vector<vector<int>> board =
	{
		{1,1,0,0,0},
		{1,1,0,0,0},
		{0,0,1,0,0},
		{0,0,0,1,1},
	};
	cout << numInsule(board);
}

