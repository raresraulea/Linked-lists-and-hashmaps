
#include <iostream>
#include <algorithm>
#include <vector>
#include <list>
#include <ctime>
#include <cstdlib>
#define LIBER -1
#define ELIBERAT -2

using namespace std;

int N = 11, Q = 7;
double c1 = 2, c2 = 3;

int h(int x, int i)
{
    return (x % N + i) % N;
}
int hp(int x, int i)
{
    return (int)(x % N + c2 * i + c1 * i * i) % N;
}
int q(int x, int i)
{
    return Q - x % Q;
}
int hd(int x, int i)
{
    return (x % N + i*q(x, i)) % N;
}


int cauta(int* H, int val, int(*myH)(int, int))
{
    int indexH = myH(val, 0);
    for (int i = 0; i < N; i++)
    {
        indexH = myH(val, i); // 1 2 -1 -1 -1 3 4 -1
        if (H[indexH] == val)
            return indexH;
        if (H[indexH] == LIBER)
            return -1;
    }
    return -1;
}
void insereaza(int*& H, int val, int& ocupate, int(*myH)(int, int))
{
    double grad_uzura = ocupate;
    if (grad_uzura > N / 2)
    {
        int vechiulN = N;
        N = N * 2 + 1;
        int* newH = new int[N];
        fill(newH, newH + N, LIBER);
        for (int i = 0; i < vechiulN; i++)
        {
            if (H[i] >= 0)
            {
                int temp;
                insereaza(newH, H[i], temp, myH);
            }
        }
        delete[] H;
        H = newH;
        //N = 2 * N + 1;
    }
    int rez = cauta(H, val, myH);
    if (rez == -1)
    {
        for (int i = 0; i < N; i++)
        {
            int indexH = myH(val, i);
            if (H[indexH] == LIBER || H[indexH] == ELIBERAT)
            {
                H[indexH] = val;
                ++ocupate;
                return;
            }
        }
    }
    else
        cout << "Exista deja valoarea " << val << endl;

}
void elimina(int* H, int val, int& ocupate, int(*myH)(int, int))
{
    int res = cauta(H, val, myH);
    if (res != -1) {
        H[res] = ELIBERAT;
        ocupate--;
    }
}

int main()
{
    int ocupate = 0;
    auto functie_dorita = hd;
    int* Hash = new int[N];
    fill(Hash, Hash + N, LIBER);
    for (int i = 0; i < 6; i++)
    {
        int val;
        cin >> val;
        insereaza(Hash, val, ocupate, functie_dorita);
    }
    for (int i = 0; i < N; i++)
    {
        cout << i << ": ";
        cout << Hash[i] << endl;
    }
    cout << ocupate << endl;
    /*for (int i = 0; i < 6; i++)
    {
        int val = rand() % 100;
        insereaza(Hash, val, ocupate, functie_dorita);
    }
    for (int i = 0; i < N; i++)
    {
        cout << i << ": ";
        cout << Hash[i] << endl;
    }
    cout << ocupate << endl;*/


}

